---
import Layout from '@/layouts/Layout.astro';
---

<Layout title="Register - MediaHand">
  <div class="min-h-screen bg-black flex items-center justify-center relative">
    <!-- Minimal grid pattern background -->
    <div class="absolute inset-0 bg-[linear-gradient(rgba(255,255,255,0.005)_1px,transparent_1px),linear-gradient(90deg,rgba(255,255,255,0.005)_1px,transparent_1px)] bg-[size:40px_40px]"></div>

    <!-- Register Form -->
    <div class="relative z-10 w-full max-w-md mx-auto p-6">
      <div class="card p-12">
        <!-- Logo and Title -->
        <div class="text-center mb-12">
          <div class="w-12 h-12 bg-white rounded-lg flex items-center justify-center mx-auto mb-6">
            <svg class="w-7 h-7 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
          </div>
          <h1 class="text-2xl font-semibold text-white mb-2 tracking-tight">Create your account</h1>
          <p class="text-gray-400 font-light">Start your photography business journey</p>
        </div>

        <!-- Error/Success Messages -->
        <div id="message-container" class="mb-6 hidden">
          <div id="error-message" class="p-4 bg-red-500/10 border border-red-500/20 rounded-lg text-red-400 text-sm font-light hidden"></div>
          <div id="success-message" class="p-4 bg-green-500/10 border border-green-500/20 rounded-lg text-green-400 text-sm font-light hidden"></div>
        </div>

        <!-- Register Form -->
        <form id="register-form" method="POST" action="/api/auth/register" class="space-y-6">
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label for="first-name" class="block text-sm font-medium text-gray-300 mb-2 tracking-tight">
                First name
              </label>
              <input
                type="text"
                id="first-name"
                name="first-name"
                required
                class="input-primary"
                placeholder="John"
              />
            </div>

            <div>
              <label for="last-name" class="block text-sm font-medium text-gray-300 mb-2 tracking-tight">
                Last name
              </label>
              <input
                type="text"
                id="last-name"
                name="last-name"
                required
                class="input-primary"
                placeholder="Doe"
              />
            </div>
          </div>

          <div>
            <label for="email" class="block text-sm font-medium text-gray-300 mb-2 tracking-tight">
              Email address
            </label>
            <input
              type="email"
              id="email"
              name="email"
              required
              class="input-primary"
              placeholder="you@example.com"
            />
          </div>

      <div>
            <label for="business-name" class="block text-sm font-medium text-gray-300 mb-2 tracking-tight">
              Business name
            </label>
            <input
              type="text"
              id="business-name"
              name="business-name"
              required
              class="input-primary"
              placeholder="Your Photography Studio"
            />
      </div>

      <div>
            <label for="password" class="block text-sm font-medium text-gray-300 mb-2 tracking-tight">
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              required
              minlength="8"
              class="input-primary"
              placeholder="Create a strong password"
            />
            <p class="text-xs text-gray-400 mt-1 font-light">Must be at least 8 characters long</p>
      </div>

      <div>
            <label for="confirm-password" class="block text-sm font-medium text-gray-300 mb-2 tracking-tight">
              Confirm password
            </label>
            <input
              type="password"
              id="confirm-password"
              name="confirm-password"
              required
              minlength="8"
              class="input-primary"
              placeholder="Confirm your password"
            />
          </div>

          <div class="flex items-start">
            <div class="flex items-center h-5">
              <input
                id="terms"
                name="terms"
                type="checkbox"
                required
                class="h-4 w-4 bg-transparent border border-white/20 rounded focus:ring-white/20 focus:ring-2 text-white"
              />
            </div>
            <div class="ml-3 text-sm">
              <label for="terms" class="text-gray-400 font-light">
                I agree to the
                <a href="/terms" class="text-white hover:text-gray-300 transition-colors font-medium tracking-tight">
                  Terms of Service
                </a>
                and
                <a href="/privacy" class="text-white hover:text-gray-300 transition-colors font-medium tracking-tight">
                  Privacy Policy
                </a>
              </label>
            </div>
      </div>

      <div>
            <button
              type="submit"
              id="register-button"
              class="btn-primary w-full py-4 text-base font-medium"
            >
              <span id="register-text">Create account</span>
              <span id="register-spinner" class="hidden">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-black inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Creating account...
              </span>
            </button>
          </div>
        </form>

        <!-- Divider -->
        <div class="my-8">
          <div class="relative">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-white/10"></div>
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-4 bg-gray-950 text-gray-400 font-light">Or continue with</span>
            </div>
          </div>
        </div>

        <!-- Social Register -->
        <div class="grid grid-cols-2 gap-4">
          <button type="button" class="btn-secondary py-3 text-sm" onclick="signUpWithGoogle()">
            <svg class="w-4 h-4 mr-2" viewBox="0 0 24 24" fill="currentColor">
              <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
              <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
              <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
              <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            Google
          </button>
          <button type="button" class="btn-secondary py-3 text-sm" onclick="signUpWithFacebook()">
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
              <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
            </svg>
            Facebook
          </button>
        </div>

        <!-- Sign in link -->
        <div class="mt-8 text-center">
          <p class="text-gray-400 font-light">
            Already have an account?
            <a href="/login" class="text-white hover:text-gray-300 transition-colors font-medium tracking-tight ml-1">
              Sign in
            </a>
          </p>
        </div>

        <!-- Free trial notice -->
        <div class="mt-8 p-4 bg-white/5 border border-white/10 rounded-lg">
          <div class="text-center">
            <p class="text-sm text-gray-300 font-light">
              Start with a
              <span class="font-medium text-white tracking-tight">14-day free trial</span>
            </p>
            <p class="text-xs text-gray-400 font-light mt-1">
              No credit card required • Cancel anytime
            </p>
          </div>
        </div>
      </div>

      <!-- Back to homepage -->
      <div class="text-center mt-8">
        <a href="/" class="text-gray-400 hover:text-white transition-colors text-sm font-light">
          ← Back to homepage
        </a>
      </div>
    </div>
  </div>

  <script>
    const form = document.getElementById('register-form') as HTMLFormElement;
    const errorMessage = document.getElementById('error-message');
    const successMessage = document.getElementById('success-message');
    const messageContainer = document.getElementById('message-container');
    const registerButton = document.getElementById('register-button');
    const registerText = document.getElementById('register-text');
    const registerSpinner = document.getElementById('register-spinner');
    const passwordField = document.getElementById('password') as HTMLInputElement;
    const confirmPasswordField = document.getElementById('confirm-password') as HTMLInputElement;

    function showMessage(text: string, isError = true) {
      messageContainer?.classList.remove('hidden');
      if (isError) {
        if (errorMessage) errorMessage.textContent = text;
        errorMessage?.classList.remove('hidden');
        successMessage?.classList.add('hidden');
      } else {
        if (successMessage) successMessage.textContent = text;
        successMessage?.classList.remove('hidden');
        errorMessage?.classList.add('hidden');
      }
    }

    function hideMessages() {
      messageContainer?.classList.add('hidden');
      errorMessage?.classList.add('hidden');
      successMessage?.classList.add('hidden');
    }

    function setLoading(loading: boolean) {
      if (loading) {
        registerText?.classList.add('hidden');
        registerSpinner?.classList.remove('hidden');
        if (registerButton) (registerButton as HTMLButtonElement).disabled = true;
      } else {
        registerText?.classList.remove('hidden');
        registerSpinner?.classList.add('hidden');
        if (registerButton) (registerButton as HTMLButtonElement).disabled = false;
      }
    }

    // Password validation
    function validatePasswords() {
      if (!passwordField || !confirmPasswordField) return true;
      
      const password = passwordField.value;
      const confirmPassword = confirmPasswordField.value;

      if (password !== confirmPassword && confirmPassword.length > 0) {
        confirmPasswordField.setCustomValidity('Passwords do not match');
        return false;
      } else {
        confirmPasswordField.setCustomValidity('');
        return true;
      }
    }

    passwordField?.addEventListener('input', validatePasswords);
    confirmPasswordField?.addEventListener('input', validatePasswords);

    // Check for URL parameters (error messages)
    const urlParams = new URLSearchParams(window.location.search);
    const message = urlParams.get('message');
    if (message) {
      showMessage(message, true);
    }

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      hideMessages();

      // Validate passwords match
      if (!validatePasswords()) {
        showMessage('Passwords do not match', true);
        return;
      }

      setLoading(true);

      try {
        const formData = new FormData(form);
        const response = await fetch('/api/auth/register', {
          method: 'POST',
          body: formData,
        });

        const responseText = await response.text();

        if (response.ok) {
          // Success
          showMessage('Account created successfully! Please check your email to verify your account.', false);
          form.reset();
          setTimeout(() => {
            window.location.href = '/login?message=Please check your email to verify your account before logging in.';
          }, 3000);
        } else {
          // Error
          showMessage(responseText || 'Registration failed. Please try again.', true);
        }
      } catch (error) {
        console.error('Registration error:', error);
        showMessage('Network error. Please check your connection and try again.', true);
      } finally {
        setLoading(false);
      }
    });

    // Social registration functions (placeholder)
    function signUpWithGoogle() {
      showMessage('Google sign-up not implemented yet.', true);
    }

    function signUpWithFacebook() {
      showMessage('Facebook sign-up not implemented yet.', true);
    }
  </script>
</Layout> 