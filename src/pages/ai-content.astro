---
import DashboardLayout from '@/layouts/DashboardLayout.astro';
---

<DashboardLayout>
  <div class="space-y-8">
    <!-- Page Header -->
    <div class="bg-gradient-to-r from-purple-600 to-indigo-600 rounded-xl p-8 text-white">
      <div class="flex items-center gap-4 mb-4">
        <div class="p-3 bg-white/20 rounded-lg">
          <svg class="h-8 w-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
          </svg>
        </div>
        <div>
          <h1 class="text-3xl font-bold">AI Content Generator</h1>
          <p class="text-purple-100">Create engaging social media content with artificial intelligence</p>
        </div>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
        <div class="bg-white/10 rounded-lg p-4">
          <div class="flex items-center gap-3 mb-2">
            <span class="text-2xl">ðŸŽ¯</span>
            <h3 class="font-semibold">Smart Targeting</h3>
          </div>
          <p class="text-sm text-purple-100">Generate content tailored to your clients and target audience</p>
        </div>
        <div class="bg-white/10 rounded-lg p-4">
          <div class="flex items-center gap-3 mb-2">
            <span class="text-2xl">ðŸ“±</span>
            <h3 class="font-semibold">Multi-Platform</h3>
          </div>
          <p class="text-sm text-purple-100">Create content optimized for Instagram, Facebook, LinkedIn, and more</p>
        </div>
        <div class="bg-white/10 rounded-lg p-4">
          <div class="flex items-center gap-3 mb-2">
            <span class="text-2xl">âš¡</span>
            <h3 class="font-semibold">Instant Results</h3>
          </div>
          <p class="text-sm text-purple-100">Get high-quality content in seconds with AI-powered generation</p>
        </div>
      </div>
    </div>

    <!-- Content Generator Component -->
    <div id="ai-content-generator-container"></div>

    <!-- Content History Component -->
    <div id="ai-content-history-container"></div>
  </div>
</DashboardLayout>

<script>
  import { AIContentGenerator } from '@/components/ui/AIContentGenerator.tsx';
  import { AIContentHistory } from '@/components/ui/AIContentHistory.tsx';
  import React from 'react';
  import { createRoot } from 'react-dom/client';

  // Function to load clients
  async function loadClients() {
    try {
      const token = localStorage.getItem('supabase_access_token');
      if (!token) return [];

      const response = await fetch('/api/clients', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const result = await response.json();
        return result.clients || [];
      }
    } catch (error) {
      console.error('Error loading clients:', error);
    }
    return [];
  }

  // Initialize the components when the page loads
  document.addEventListener('DOMContentLoaded', async () => {
    const clients = await loadClients();

    // Initialize AI Content Generator
    const generatorContainer = document.getElementById('ai-content-generator-container');
    if (generatorContainer) {
      const generatorRoot = createRoot(generatorContainer);
      generatorRoot.render(
        React.createElement(AIContentGenerator, {
          clients: clients,
          onContentGenerated: (content) => {
            console.log('Content generated:', content);
            // Refresh the history component when new content is generated
            if (window.refreshContentHistory) {
              window.refreshContentHistory();
            }
          }
        })
      );
    }

    // Initialize AI Content History
    const historyContainer = document.getElementById('ai-content-history-container');
    if (historyContainer) {
      const historyRoot = createRoot(historyContainer);
      const historyComponent = React.createElement(AIContentHistory, {
        onEditContent: (content) => {
          console.log('Edit content:', content);
          // You could open an edit modal or navigate to an edit page
        },
        onDeleteContent: (contentId) => {
          console.log('Content deleted:', contentId);
        }
      });
      
      historyRoot.render(historyComponent);
      
      // Expose refresh function globally so generator can trigger it
      window.refreshContentHistory = () => {
        historyRoot.render(historyComponent);
      };
    }
  });
</script>

<style>
  /* Add custom styles for the AI content components */
  #ai-content-generator-container,
  #ai-content-history-container {
    min-height: 400px;
  }

  /* Ensure proper spacing and responsive behavior */
  .space-y-8 > * + * {
    margin-top: 2rem;
  }

  /* Custom scrollbar for modals */
  .overflow-y-auto::-webkit-scrollbar {
    width: 6px;
  }

  .overflow-y-auto::-webkit-scrollbar-track {
    background: #f1f5f9;
  }

  .overflow-y-auto::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }

  .overflow-y-auto::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  /* Animation for loading states */
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Improved focus states for accessibility */
  .focus\:ring-2:focus {
    box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
  }

  .focus\:ring-indigo-500:focus {
    box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
  }

  /* Custom gradient backgrounds */
  .bg-gradient-to-r {
    background-image: linear-gradient(to right, var(--tw-gradient-stops));
  }

  /* Responsive grid improvements */
  @media (max-width: 768px) {
    .grid-cols-1.lg\:grid-cols-2 {
      grid-template-columns: 1fr;
    }
  }

  @media (min-width: 1024px) {
    .grid-cols-1.lg\:grid-cols-2 {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style> 